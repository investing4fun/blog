{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Fund performance . against: . benchmark index | S&amp;P500 | Chinese main index | . . import pandas as pd import yfinance as yf . import yfinance as yf sp500 = yf.Ticker(&quot;^GSPC&quot;) d30 = yf.Ticker(&quot;^DJI&quot;) sse = yf.Ticker(&quot;000001.SS&quot;) # get stock info sse.info . {&#39;previousClose&#39;: 3363.1133, &#39;regularMarketOpen&#39;: 3351.79, &#39;twoHundredDayAverage&#39;: 3294.666, &#39;trailingAnnualDividendYield&#39;: None, &#39;payoutRatio&#39;: None, &#39;volume24Hr&#39;: None, &#39;regularMarketDayHigh&#39;: 3397.0066, &#39;navPrice&#39;: None, &#39;averageDailyVolume10Day&#39;: 290328, &#39;totalAssets&#39;: None, &#39;regularMarketPreviousClose&#39;: 3363.1133, &#39;fiftyDayAverage&#39;: 3382.2573, &#39;trailingAnnualDividendRate&#39;: None, &#39;open&#39;: 3351.79, &#39;toCurrency&#39;: None, &#39;averageVolume10days&#39;: 290328, &#39;expireDate&#39;: None, &#39;yield&#39;: None, &#39;algorithm&#39;: None, &#39;dividendRate&#39;: None, &#39;exDividendDate&#39;: None, &#39;beta&#39;: None, &#39;circulatingSupply&#39;: None, &#39;startDate&#39;: None, &#39;regularMarketDayLow&#39;: 3348.3452, &#39;priceHint&#39;: 2, &#39;currency&#39;: &#39;CNY&#39;, &#39;regularMarketVolume&#39;: 3684885724, &#39;lastMarket&#39;: None, &#39;maxSupply&#39;: None, &#39;openInterest&#39;: None, &#39;marketCap&#39;: None, &#39;volumeAllCurrencies&#39;: None, &#39;strikePrice&#39;: None, &#39;averageVolume&#39;: 243535, &#39;priceToSalesTrailing12Months&#39;: None, &#39;dayLow&#39;: 3348.3452, &#39;ask&#39;: 0, &#39;ytdReturn&#39;: None, &#39;askSize&#39;: 0, &#39;volume&#39;: 3684885724, &#39;fiftyTwoWeekHigh&#39;: 3465.729, &#39;forwardPE&#39;: None, &#39;maxAge&#39;: 1, &#39;fromCurrency&#39;: None, &#39;fiveYearAvgDividendYield&#39;: None, &#39;fiftyTwoWeekLow&#39;: 2646.805, &#39;bid&#39;: 0, &#39;tradeable&#39;: False, &#39;dividendYield&#39;: None, &#39;bidSize&#39;: 0, &#39;dayHigh&#39;: 3397.0066, &#39;exchange&#39;: &#39;SHH&#39;, &#39;shortName&#39;: &#39;SSE Composite Index&#39;, &#39;longName&#39;: &#39;SSE Composite Index&#39;, &#39;exchangeTimezoneName&#39;: &#39;Asia/Shanghai&#39;, &#39;exchangeTimezoneShortName&#39;: &#39;CST&#39;, &#39;isEsgPopulated&#39;: False, &#39;gmtOffSetMilliseconds&#39;: &#39;28800000&#39;, &#39;quoteType&#39;: &#39;INDEX&#39;, &#39;symbol&#39;: &#39;000001.SS&#39;, &#39;messageBoardId&#39;: &#39;finmb_INDEX000001.SS&#39;, &#39;market&#39;: &#39;cn_market&#39;, &#39;regularMarketPrice&#39;: 3351.79, &#39;logo_url&#39;: &#39;&#39;} . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pawlowskimichal.github.io/blog/jupyter/2020/12/26/fund-benchmark.html",
            "relUrl": "/jupyter/2020/12/26/fund-benchmark.html",
            "date": " • Dec 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Principles by Ray Dalio",
            "content": "In one of the books I’ve recently read, author recommended to watch Ray Dalio’s How The Economic Machine Works. This is an excellent piece of content that brilliantly explains economy in the layman terms. I thought that this guy is not only an expert, but also an excellent teacher. Later I’ve found out that he is on a missing to pass on his knowledge further and so he is writing book about economy and cycles: Principles by Ray Dalio which is available online free of charge. He is a humble and straightforward man who built the largest hedge fund called Bridgewater. . The video briefly explains concepts like productivity growth, economic cycles, role of the central banks and credit availability as a driver of economic expansion, all in a form of a cartoon. The book is based on numbers going back hundereds of years to show in detail how and why economic cycles are happening to understand that this is inevitable fact for economy. .",
            "url": "https://pawlowskimichal.github.io/blog/book/investing/2020/12/23/principles_ray_dalio.html",
            "relUrl": "/book/investing/2020/12/23/principles_ray_dalio.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Investing - a (re)start",
            "content": "This is the time of the year, when you tend to think of the things to improve in your life. One of the those that kept me busy this year was investing. During the COVID-19 pandemic stock market lured me in one more time. . I became interested in markets right after I turned 18. It was a time of a big boom no the polish stock exchange, and I wanted a piece of it. I didn’t know much about life not to mention how market worked so it was based rather on emotions than on knowledge. Fortunately I didn’ t loose anything, and I didn’t gain much either. This year it started in a similar way - a lot of gut feeling decisions, like buying oil at the rock bottom, buying more BTC etc. Most proved to be profitable, but still it is a gut feeling investing, based on more knowledge than before, but nevertheless emotionally driven. . This year I’ve decided to take more structured approach to investing, that takes less time on a daily basis, is more diversified and in general safer. . This will include: . find out more about different sectors (clean energy, AI/Robotics, healthcare and eldery care, biotech …), | ethical investing, | learn ways automate trading (from basics like stop loss orders, to trading algorithms that can signal certain market conditions, or even perform trades on my behalf), | research Forex, CFDs - is it something I could use to invest and in which circumstances, | figure out best ways to diversity portfolio (funds, ETFs), | how to hedge small, private portfolio, | cutting edge of investing - (like DeFi for example). | . and think of 2021 specific topics: . think about the economic cycle and where we are at now, | prepare calendar with major economic events. | . This is probably not a complete list, but my aim is to research one smallish topic a week + one bigger one a month and write it down for my own benefit. .",
            "url": "https://pawlowskimichal.github.io/blog/investing/2020/12/22/investing.html",
            "relUrl": "/investing/2020/12/22/investing.html",
            "date": " • Dec 22, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Husband and father of Weronika. . On a journey to be a better human being. . Software developer turning data scientist. .",
          "url": "https://pawlowskimichal.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pawlowskimichal.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}